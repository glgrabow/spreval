spr.loc<-cbind(spr.x,spr.y)
plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft")
#now plot application rates
inches<-labels/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
in.hr<-inches*4 # 15 minute run time in audit, i.e., both zones ran 15 minutes
in.hr.data<-cbind(grid[ ,1],grid[ ,2],round(in.hr,2))
# plot(in.hr.data). send plot to object for recall of par("usr")
# set asp=1 for true scale plot and non-skewed sprinkler wetted radius arcs
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
#reset to user coordinates used in plotss for subsequent low level plot drawing (arcs,lines)
par(usr=main.plot) # use this to reset par("usr") for low level plots (arc and lines)
cz1<-1;cz2<-1 # color for zone 1 and 2 arcs
#sprinkler 1
draw.arc(x=spr.x[1],y=spr.y[1],radius=27,deg1=-40,deg2=185,col=cz1,lwd=1.5)
draw.radial.line(0,27,center=c(spr.x[1],spr.y[1]),deg=-40,col=cz1,lwd=1.5)
draw.radial.line(0,27,center=c(spr.x[1],spr.y[1]),deg=185,col=cz1,lwd=1.5)
#sprinkler 2
draw.arc(x=spr.x[2],y=spr.y[2],radius=23,deg1=-20,deg2=175,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,23,center=c(spr.x[2],spr.y[2]),deg=-20,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,23,center=c(spr.x[2],spr.y[2]),deg=175,col=cz2,lwd=1.5,lty=2)
#sprinkler 3
draw.arc(x=spr.x[3],y=spr.y[3],radius=20,deg1=-5,deg2=220,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,20,center=c(spr.x[3],spr.y[3]),deg=-5,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,20,center=c(spr.x[3],spr.y[3]),deg=220,col=cz2,lwd=1.5,lty=2)
#sprinkler 4
draw.arc(x=spr.x[4],y=spr.y[4],radius=21,deg1=-20,deg2=195,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,22,center=c(spr.x[4],spr.y[4]),deg=-20,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,22,center=c(spr.x[4],spr.y[4]),deg=195,col=cz2,lwd=1.5,lty=2)
main.plot
main.plot$user
plotss.usr
source("/Volumes/R/Packages/spreval/R/plotss.R")
library(spreval)
main.plot
main.plot$user
library(spreval)
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
main.plot
main.plot$user
plotss.usr
library(spreval)
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
main.plot
plotss.usr
library(spreval)
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
main.plot
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
plotss.usr
library(spreval)
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
source("/Volumes/R/Packages/spreval/R/plotss.R")
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
tst<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
tst
source("/Volumes/R/Packages/spreval/R/plotss.R")
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
plotss.usr
my.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
my.plot
library(spreval)
install.packages("onls")
install.packages("deming")
# Data from Ripley and Thompson
fit <- deming(aes ~ aas, data=arsenate, xstd=se.aas, ystd=se.aes)
print(fit)
## Not run:
Coef se(coef) lower 0.95 upper 0.95
Intercept 0.1064   0.2477    -0.3790     0.5919
Slope     0.9730   0.1430     0.6928     1.2532
Scale= 1.358
## End(Not run)
plot(1:30, fit$dfbeta[,2]) #subject 22 has a large effect on the slope
# Constant proportional error fit (constant CV)
fit2 <- deming(new.lot ~ old.lot, ferritin, cv=TRUE,
subset=(period==3))
library(deming)
# Data from Ripley and Thompson
fit <- deming(aes ~ aas, data=arsenate, xstd=se.aas, ystd=se.aes)
print(fit)
## Not run:
Coef se(coef) lower 0.95 upper 0.95
Intercept 0.1064   0.2477    -0.3790     0.5919
Slope     0.9730   0.1430     0.6928     1.2532
Scale= 1.358
## End(Not run)
plot(1:30, fit$dfbeta[,2]) #subject 22 has a large effect on the slope
# Constant proportional error fit (constant CV)
fit2 <- deming(new.lot ~ old.lot, ferritin, cv=TRUE,
subset=(period==3))
summary(fit)
fit$se
fit$residuals
DNase1 <- subset(DNase, Run == 1)
DNase1$density <- sapply(DNase1$density, function(x) rnorm(1, x, 0.1 * x))
mod1 <- onls(density ~ Asym/(1 + exp((xmid - log(conc))/scal)),
data = DNase1, start = list(Asym = 3, xmid = 0, scal = 1))
print(mod1)
plot(mod1)
summary(mod1)
library(onls)
DNase1 <- subset(DNase, Run == 1)
DNase1$density <- sapply(DNase1$density, function(x) rnorm(1, x, 0.1 * x))
mod1 <- onls(density ~ Asym/(1 + exp((xmid - log(conc))/scal)),
data = DNase1, start = list(Asym = 3, xmid = 0, scal = 1))
print(mod1)
plot(mod1)
summary(mod1)
## 6. Example to show that one can even conduct
## linear orthogonal regression (Deming regression).
## Comparison to XLstat
## http://www.xlstat.com/de/lern-center/tutorials/
## method-comparison-with-the-deming-regression-with-xlstat-life.html
x <- c(9.8, 9.7, 10.7, 10.9, 12.4, 12.5, 12.8, 12.8, 12.9, 13.3,
13.4, 13.5, 13.7, 14.9, 15.2, 15.5)
y <- c(10.1, 11.4, 10.8, 11.3, 11.8, 12.1, 12.3, 13.6, 14.2, 14.4,
14.6, 15.3, 15.5, 15.8, 16.2, 16.5)
DAT <- data.frame(x, y)
mod7 <- onls(y ~ a + b * x, data = DAT,
start = list(a = 2, b = 3))
print(mod7) ## -1.909/1.208 as on webpage
plot(mod7)
library(spreval)
library(fields) # for easy grid construction
data(catchcan)
use.data<-catchcan$lateral #matrix can be viewed as plan view of catch data
#x,y matrix 10 ft x 10 ft catch can spacing
x<-seq(-35,25,10) # x=0 is lateral position
y<-seq(55,5,-10) #plan view top to bottom
grd<-list(x,y) # prepare list for make.surface function [fields]
grid<-make.surface.grid(grd)
plot(grid)
labels<-matrix(t(use.data),ncol=1)#transpose matrix and stack rows into 1 column
text(grid[ ,1],grid[ ,2],labels,cex=0.8,pos=1) # plot catch data at collection point
## or plot using function plotss.  Shows test data from 1 lateral with no overlap.
cdata<-cbind(grid[ ,1],grid[ ,2],labels) #construct required catch can data matrix
sp.x<-rep(0,3);sp.y<-seq(60,0,-30)# sprinkler spacing (y) = 30 ft, plot top to bottom
sploc<-cbind(sp.x,sp.y) #construct required sprinkler location matrix
plotss(cdata,sploc)
library(fields) # for easy grid construction
data(catchcan)
use.data<-catchcan$lateral #matrix can be viewed as plan view of catch data
#x,y matrix 10 ft x 10 ft catch can spacing
x<-seq(-35,25,10) # x=0 is lateral position
y<-seq(55,5,-10) #plan view top to bottom
grd<-list(x,y) # prepare list for make.surface function [fields]
grid<-make.surface.grid(grd)
plot(grid)
labels<-matrix(t(use.data),ncol=1)#transpose matrix and stack rows into 1 column
text(grid[ ,1],grid[ ,2],labels,cex=0.8,pos=1) # plot catch data at collection point
## or plot using function plotss.  Shows test data from 1 lateral with no overlap.
cdata<-cbind(grid[ ,1],grid[ ,2],labels) #construct required catch can data matrix
sp.x<-rep(0,3);sp.y<-seq(60,0,-30)# sprinkler spacing (y) = 30 ft, plot top to bottom
sploc<-cbind(sp.x,sp.y) #construct required sprinkler location matrix
plotss(cdata,sploc,asp=1)
cdata
sprinklerx<-c(0,0,60,60)
sprinklery<-c(60,0,60,0)
sprinklerx
sploc<-cbind(sprinklerx,sprinklery)
sploc
gage.space<-15
x<-c(rep(7.5,4),rep(22.5,4),rep(37.5,4),rep(52.5,4))
y<-rep(seq(52.5,7.5,-gage.space),4)
x
y
depth<-c(0.3,0.32,0.26,0.26,0.16,0.32,0.14,0.41,
0.14,0.27,0.38,0.34,0.29,0.32,0.45,0.25)
depth
cdata<-cbind(x,y,depth)
cdata
plotss(cdata,sploc,xlab="ft",ylab="ft")
#now grey scale colors, pass "col"
plotss(cdata,sploc,xlab="ft",ylab="ft",col=grey.colors(16))
plotss(cdata,sploc,xlab="ft",ylab="ft",asp=1)
#now grey scale colors, pass "col"
plotss(cdata,sploc,xlab="ft",ylab="ft",col=grey.colors(16),asp=1)
use.data
library(fields) # for easy grid construction
data(catchcan)
use.data<-catchcan$lateral #matrix can be viewed as plan view of catch data
#x,y matrix 10 ft x 10 ft catch can spacing
x<-seq(-35,25,10) # x=0 is lateral position
y<-seq(55,5,-10) #plan view top to bottom
grd<-list(x,y) # prepare list for make.surface function [fields]
grid<-make.surface.grid(grd)
plot(grid)
labels<-matrix(t(use.data),ncol=1)#transpose matrix and stack rows into 1 column
text(grid[ ,1],grid[ ,2],labels,cex=0.8,pos=1) # plot catch data at collection point
## or plot using function plotss.  Shows test data from 1 lateral with no overlap.
cdata<-cbind(grid[ ,1],grid[ ,2],labels) #construct required catch can data matrix
sp.x<-rep(0,3);sp.y<-seq(60,0,-30)# sprinkler spacing (y) = 30 ft, plot top to bottom
sploc<-cbind(sp.x,sp.y) #construct required sprinkler location matrix
plotss(cdata,sploc)
library(fields) # for easy grid construction
data(catchcan)
use.data<-catchcan$lateral #matrix can be viewed as plan view of catch data
#x,y matrix 10 ft x 10 ft catch can spacing
x<-seq(-35,25,10) # x=0 is lateral position
y<-seq(55,5,-10) #plan view top to bottom
grd<-list(x,y) # prepare list for make.surface function [fields]
grid<-make.surface.grid(grd)
plot(grid)
labels<-matrix(t(use.data),ncol=1)#transpose matrix and stack rows into 1 column
text(grid[ ,1],grid[ ,2],labels,cex=0.8,pos=1) # plot catch data at collection point
## or plot using function plotss.  Shows test data from 1 lateral with no overlap.
cdata<-cbind(grid[ ,1],grid[ ,2],labels) #construct required catch can data matrix
sp.x<-rep(0,3);sp.y<-seq(60,0,-30)# sprinkler spacing (y) = 30 ft, plot top to bottom
sploc<-cbind(sp.x,sp.y) #construct required sprinkler location matrix
plotss(cdata,sploc,asp=1)
eda.plot(raw.data.in)
eda.shape(raw.data.in)
eda.shape(as.vector(na.exclude(raw.data.in)))
eda.shape(as.vector(na.exclude(raw.data.in*4)))
catchcan
library(devtools)
library(rhub)
library(rhub)
results<-rhub::check_for_cran()
results
results.fedora<-rhub::check_for_cran(path="/Volumes/R/Packages/spreval",platforms="fedora-clang-devel")
results.fedora
results.debian<-rhub::check_for_cran(path="/Volumes/R/Packages/spreval",platforms="debian-clang-devel")
results.debian
rhub::check_on_windows()
results.check.windows<-rhub::check_on_windows()
results.check.windows
win.develop.results<-devtools::check_win_dev()
win.develop.results<-devtools::check_win_devel()
win.develop.results
results.windows<-rhub::check_for_cran(path="/Volumes/R/Packages/spreval",platforms="windows-x86_64-release")
results.windows
library(devtools)
spell_check()
spell_check()
devtools::release(pkg="spreval")
devtools::release()
check_rhub()
devtools::release()
library(pkgdown)
pkgdown::build_site()
devtools::release()
devtools::release()
plotss.usr
plotss.usr
install.packages("/Volumes/R/Packages/spreval_1.1.0.tar.gz", repos = NULL, type = "source")
win.dev.results<-devtools::check_win_devel()
win.dev.results<-devtools::check_win_devel()
win.dev.results
win.develop.results
devtools::check_win_devel()
pkgdown::build_site()
devtools::release()
check_rhub()
devtools::release()
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
pcatch<-c(rep(NA,8),141,160,122,130,143,150,134,123,144,138,135,207,122,114,115,138,109,113,114,126,116,107,122,140,117,105,111,125,118,127,115,147,127,122,118,144,112,124,126,151,120,122,115,143,124,114,115,160,120,110,109,117,85,194,148,82.)
pcatch
DU.pivot(pcatch)
DU.pivot(pcatch)
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
DU.pivot(pcatch)
posno<-seq(1,length(pcatch),1)
posno
wtd<-x*posno # catch weighted by position number
wtd<-pcatch*posno # catch weighted by position number
swtd<-sum(wtd) # get sum of weighted catches
sposno<-sum(posno(which(posno(!is.na(pcatch))))) # sum of used position numbers.
sposno<-sum(posno[which(!is.na(pcatch))]) # sum of used position numbers.
sposno
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
DU.pivot(pcatch)
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
DU.pivot(pcatch)
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
DU.pivot(pcatch)
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
DU.pivot(pcatch)
testdu<-DU.pivot(pcatch)
testdu
posno
wtd<-pcatch*posno # catch weighted by position number
wtd
swtd<-sum(wtd) # get sum of weighted catches
swtd
swtd<-sum(wtd,na.rm=TRUE)
swtd
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
testpdu<-DU.pivot(pcatch)
testpdu
sposno<-sum(posno[which(!is.na(pcatch))]) # sum of used position numbers.
sposno
lqsposno<-sposno/4 #sum low quarter postion numbers
lqsposno
csumpos<-cumsum(posno[which(!is.na(pcatch))])
wtdind<-which.min((abs(csumpos-lqsposno)))# find index of low quarter cumsum pos no.
wtdind
csumpos
wtd
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
testpdu<-DU.pivot(pcatch)
testpdu
swtd<-sum(wtd,na.rm=TRUE) # get sum of weighted catches
swtd
lq<-lqwtd/lqsposno # low quarter catch
sposno<-sum(posno[which(!is.na(pcatch))]) # sum of used position numbers.
sposno
lqsposno<-sposno/4 #sum low quarter position numbers
lqsposno
csumpos<-cumsum(posno[which(!is.na(pcatch))])
csumpos
wtdind<-which.min((abs(csumpos-lqsposno)))# find index of low quarter cumsum pos no.
wtdind
lqwtd<-swtd[wtdind]# sum low quarter weighted catch
lqwtd
lqwtd<-wtd[wtdind]# sum low quarter weighted catch
lqwtd
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
testpdu<-DU.pivot(pcatch)
testpdu
csumwtd<-cumsum(wtd[which(!is.na(pcatch))])
csumwtd
csumpos
wtdind
lqwtd<-csumwtd[wtdind]# sum low quarter weighted catch
lqwtd
lq<-lqwtd/lqsposno # low quarter catch
lq
lqwtd
lqsposno
comb<-as.data.frame(posno,pcatch)
posno
pcatch
comb<-as.data.frame(cbind(posno,pcatch))
comb
comb.sort<-with(comb,comb[order(comb$pcatch), ])#R equivalent sort
comb.sort
comb$weighted<-comb$posno*comb$x
comb.sort$weighted<-comb.sort$posno*comb.sort$pcatch
comb.sort
cumsort.posno<-cumsum(comb.sort$posno)
cumsort.posno
lqsposno
lqind<-which.min((abs(cumsort.posno-lqsposno))) # find index of lqsorted
lqind
lq<-comb.sort$weighted[lqind]
lq
cumsort.weighted<-cumsum(comb.sort$weighted)
cumsort.weighted
lq<-cumsort.weighted[lqind]/cumsort.posno[lqind]
lq
cumsort.weighted[lqind]
cumsort.posno[lqind]
swtd
sposno
DU<-lq/sys
sys<-swtd/sposno # weighted system average catch
sys
DU<-lq/sys
DU
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
testpdu<-DU.pivot(pcatch)
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
testpdu<-DU.pivot(pcatch)
testpdu<-DU.pivot(pcatch)
comb<-as.data.frame(cbind(posno,pcatch))
comb
comb.sort<-with(comb,comb[order(comb$x), ])# sort by raw catch
comb
comb.sort<-with(comb,comb[order(comb$pcatch), ])# sort by raw catch
comb.sort
is.numeric(pcatch)
comb.sort$weighted<-comb.sort$posno*comb.sort$pcatch
comb.sort
lqsposno<-sposno/4 #sum low quarter position numbers
# cumulate sorted position numbers
cumsort.posno<-cumsum(comb.sort$posno)
cumsort.weighted<-cumsum(comb.sort$weighted)
lqind<-which.min((abs(cumsort.posno-lqsposno))) # find index of lqsorted
lq<-cumsort.weighted[lqind]/cumsort.posno[lqind]
sys<-swtd/sposno # weighted system average catch
DU<-lq/sys
DU
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
test<-DU.pivot(pcatch)
x<-pcatch
# x is array of catch volumes or depths, order proximal to distal from pivot point.
# assumes constant catch can spacing layout
#generate array of position numbers for weighted scaling of catches
#weighting required due to increasing area irrigated with increasing distance
#from pivot point. ss Mirriam and Keller 1978 pg. 81 ff.
posno<-seq(1,length(x),1)
wtd<-x*posno # catch weighted by position number
swtd<-sum(wtd,na.rm=TRUE) # get sum of weighted catches
sposno<-sum(posno[which(!is.na(x))]) # sum of used position numbers.
# now combine position numbers and catches to sort by catch volumes/depths
comb<-as.data.frame(cbind(posno,x))
comb.sort<-with(comb,comb[order(comb$x), ])# sort by raw catch
comb.sort$weighted<-comb.sort$posno*comb.sort$pcatch
lqsposno<-sposno/4 #sum low quarter position numbers
# cumulate sorted position numbers
cumsort.posno<-cumsum(comb.sort$posno)
cumsort.weighted<-cumsum(comb.sort$weighted)
lqind<-which.min((abs(cumsort.posno-lqsposno))) # find index of lqsorted
lq<-cumsort.weighted[lqind]/cumsort.posno[lqind]
sys<-swtd/sposno # weighted system average catch
DU<-lq/sys
DU
# x is array of catch volumes or depths, order proximal to distal from pivot point.
# assumes constant catch can spacing layout
#generate array of position numbers for weighted scaling of catches
#weighting required due to increasing area irrigated with increasing distance
#from pivot point. ss Mirriam and Keller 1978 pg. 81 ff.
posno<-seq(1,length(x),1)
wtd<-x*posno # catch weighted by position number
swtd<-sum(wtd,na.rm=TRUE) # get sum of weighted catches
sposno<-sum(posno[which(!is.na(x))]) # sum of used position numbers.
# now combine position numbers and catches to sort by catch volumes/depths
comb<-as.data.frame(cbind(posno,x,wtd))
comb.sort<-with(comb,comb[order(comb$x), ])# sort by raw catch
lqsposno<-sposno/4 #sum low quarter position numbers
# cumulate sorted position numbers
cumsort.posno<-cumsum(comb.sort$posno)
cumsort.wtd<-cumsum(comb.sort$wtd)
lqind<-which.min((abs(cumsort.posno-lqsposno))) # find index of lqsorted
lq<-cumsort.wtd[lqind]/cumsort.posno[lqind]
sys<-swtd/sposno # weighted system average catch
DU<-lq/sys
DU
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
source("/Volumes/R/Packages/spreval/R/DU.pivot.R")
DU.pivot(pcatch)
test<-DU.pivot(pcatch)
test
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
# Initial released version in CRAN (2021-07-05)
* v.1.0.0
---
pkgdown::build_site()
pkgdown::build_site()
install.packages("rmarkdown")
library(pkgdown)
library(rmarkdown)
build_site_github_pages()
pkgdown::build_news()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_news()
pkgdown::build_site()
pkgdown::build_news(overide=list("one_page: false"))
pkgdown::build_news(overide="one_page: false)
)
pkgdown::build_news(overide=one_page: false)
pkgdown::build_news(overide="one_page: false")
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
install.packages("pandocfilters")
library(devtools)
library(pkgdown)
install.packages("pkgdown")
install.packages("pkgdown")
library(pkgdown)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
install.packages("~/Downloads/pkgdown_2.0.0.tar", repos = NULL)
detach("package:pkgdown", unload = TRUE)
library(pkgdown)
remove.packages("pkgdown")
install.packages("~/Downloads/pkgdown_2.0.0.tar", repos = NULL)
install.packages("~/Downloads/pkgdown_1.6.1.tar.gz", repos = NULL, type = "source")
detach("package:pkgdown", unload = TRUE)
library(pkgdown)
pkgdown::build_site()
remove.packages("pkgdown")
install.packages("~/Downloads/pkgdown_2.0.0.tar.gz", repos = NULL, type = "source")
pkgdown::build_site()
install.packages("pkgdown")
library(pkgbuild)
library(pkgdown)
detach("package:pkgbuild", unload = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_github_release()
library(spreval)
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
remove.packages("spreval")
install.packages("spreval")
pivot.data<-x
pivot.data
print( ts(1:10, frequency = 7, start = c(12, 2)), calendar = TRUE)
attributes(catchcan$lateral)
catchcan$lateral

prop.diff<-prop.xxb-prop.xx
prop.diff
hist(prop.diff)
above.xx<-xx[xx>target];above.xx<-above.x-target# array of xx - target for above target, i.e., excess irrigation
# get cumulative proportions for xx about target
above.yy<-prop.diff[xx > target]
excess<-sum(above.xx*above.yy)
xx<-x
target
target<-0.1
above.xx<-xx[xx>target];above.xx<-above.xx-target# array of xx - target for above target, i.e., excess irrigation
# get cumulative proportions for xx about target
above.yy<-prop.diff[xx > target]
excess<-sum(above.xx*above.yy)
excess
total<-sum(xx*prop.diff)
total
1-(excess/total)
source("/Volumes/R/effalt.R")
xx
x
x
raw.data<-catchcan$landscape #import data from catchcan.rda
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # comp
library(spreval)
library(plotrix)
raw.data<-catchcan$landscape #import data from catchcan.rda
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
eff
effaltout<-effalt(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
effaltout
source("/Volumes/R/effalt.R")
effaltout<-effalt(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
effaltout
raw.data<-catchcan$landscape #import data from catchcan.rda
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
eff
effaltout<-effalt(na.exclude(as.vector(raw.data.in)),.05)) # compute eff and adeq.
effaltout<-effalt(na.exclude(as.vector(raw.data.in)),.05) # compute eff and adeq.
effalt
effaltout
source("/Volumes/R/Packages/spreval/R/CUDU.R")
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
source("/Volumes/R/Packages/spreval/R/CUDU.R")
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
eff
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),0.05) # compute eff and adeq.
source("/Volumes/R/Packages/spreval/R/CUDU.R")
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),0.05) # compute eff and adeq.
eff
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),0.15) # compute eff and adeq.
source("/Volumes/R/Packages/spreval/R/CUDU.R")
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),0.15) # compute eff and adeq.
eff
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-effalt(na.exclude(as.vector(raw.data.in)),0.15) # compute eff and adeq.
eff
c<-(4,3,5,6,2,3,8,7,9,3,4)
x<-c(4,3,5,6,2,3,8,7,9,3,4)
sfplot(x)
sfplot(x,main=NULL)
sfplot(x,target=NULL)
sfplot(x,target=3)
prop<-yy/sum(yy) # vector of relative occurrence - should add to 1.0
prop.xx<-cumsum(prop) # cummulate proportions
raw.data<-catchcan$landscape #import data from catchcan.rda
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
d<-density(raw.data.in,n=512,cut=3)
d<-density(na.exclude9raw.data.in),n=512,cut=3)
d<-density(na.exclude(raw.data.in),n=512,cut=3)
xx=d$x;yy=d$y;dx <- xx[2L] - xx[1L];C <- sum(yy) * dx
plot(yy,xx,ylim=rev(c(0,max(xx))),xlim=c(0,1),xlab="cum. prob.",ylab="in. applied")
df1<-as.data.frame(cbind(yy,xx))
ordered.df1<-df1[order(df1$yy), ]
xx<-ordered.df1$xx
yy<-ordered.df1$yy
plot(yy,xx,ylim=rev(c(0,max(xx))),xlim=c(0,1),type="l")
df1
prop<-yy/sum(yy) # vector of relative occurrence - should add to 1.0
prop.xx<-cumsum(prop) # cummulate proportions
yy
yy
xx
prop.xx
xx
prop.xx
xx
d<-density(na.exclude(raw.data.in),n=512,cut=3)
xx=d$x;yy=d$y;dx <- xx[2L] - xx[1L];C <- sum(yy) * dx
prop<-yy/sum(yy) # vector of relative occurrence - should add to 1.0
prop.xx<-cumsum(prop) # cummulate proportions
df1<-as.data.frame(cbind(xx,prop.xx))
ordered.df1<-df1[order(df1$prop.xx), ]
x<-ordered(ordered.df1$prop.xx)
y<-ordered(ordered.df1$xx)
plot(x,y,ylim=rev(c(0,max(y))),xlim=c(0,1),xtitle="cum. freq.",ylabel="depth applied, in.",type="l")
plot(x,y,ylim=rev(c(0,max(y))),xlim=c(0,1),xlab="cum. freq.",ylab="depth applied, in.",type="l")
plot(x,y,ylim=rev(c(0,max(y))),xlim=c(0,1),xlab="cum. freq.",ylab="depth applied, in.",type="l")
plot(x,y,ylim=rev(c(0,max(y))),xlim=c(0,1),xlab="cum. freq.",ylab="depth applied, in.",type="l")
x
y
plot(as.numeric(x),as.numeric(y),ylim=rev(c(0,max(y))),xlim=c(0,1),xlab="cum. freq.",ylab="depth applied, in.",type="l")
plot(as.numeric(x),as.numeric(y),ylim=rev(c(0,max(as.numeric(y))),xlim=c(0,1),xlab="cum. freq.",ylab="depth applied, in.",type="l")
)
plot(as.numeric(x),as.numeric(y),ylim=rev(c(0,max(as.numeric(y)))),xlim=c(0,1),xlab="cum. freq.",ylab="depth applied, in.",type="l")
x
x<-as.numeric(x)
is.numeric(x)
x
raw.data<-catchcan$landscape #import data from catchcan.rda
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
d<-density(raw.data.in,n=512,cut=3)
d<-density(na.exclude(as.vector(raw.data.in),n=512,cut=3))
d
xx=d$x;yy=d$y
xx
yy
prop<-yy/sum(yy) # vector of relative occurrence - should add to 1.0
prop.xx<-cumsum(prop) # cummulate proportions
xx
prop.xx
plot(xx,yy)
plot(xx,prop.xx)
plot(prop.xx,xx,ylim=rev(c(0,max(xx))),xlim=c(0,1),type="l",xlab="cum. prob.",ylab="in. applied")
plot(prop.xx,xx,ylim=rev(c(0,max(xx))),xlim=c(0,1),type="l",xlab="cum. prob.",ylab="in. applied".lw=2)
plot(prop.xx,xx,ylim=rev(c(0,max(xx))),xlim=c(0,1),type="l",xlab="cum. prob.",ylab="in. applied",lw=2)
plot(prop.xx,xx,ylim=rev(c(0,max(xx))),xlim=c(0,1),type="l",xlab="cum. prob.",ylab="in. applied")
plot(prop.xx,xx,ylim=rev(c(0,max(xx))),xlim=c(0,1),type="l",xlab="cum. prob.",ylab="in. applied",lwd=2)
abline(h=target)
source("/Volumes/R/Packages/spreval/R/CUDU.R")
eff<-eff(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq
eff<-eff(na.exclude(as.vector(raw.data.in)),.15) # compute eff and adeq
source("/Volumes/R/Packages/spreval/R/CUDU.R")
eff<-eff(na.exclude(as.vector(raw.data.in)),.15) # compute eff and adeq
eff
source("/Volumes/R/effalt.R")
effalt<-effalt(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
raw.data<-catchcan$landscape #import data from catchcan.rda
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
raw.data<-catchcan$landscape #import data from catchcan.rda
library(spreval)
source("/Volumes/R/Packages/spreval/R/CUDU.R")
source("/Volumes/R/effalt.R")
catchcan
raw.data<-catchcan$landscape #import data from catchcan.rda
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
eff<-eff(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
effalt<-effalt(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
mean(raw.data.in,na.rm=TRUE)
eff<-eff(na.exclude(as.vector(raw.data.in)),0.05) # compute eff and adeq.
eff<-effalt(na.exclude(as.vector(raw.data.in)),0.05) # compute eff and adeq.
effalt<-effalt(na.exclude(as.vector(raw.data.in)),0.05) # compute eff and adeq.
source("/Volumes/R/effalt.R")
effalt<-effalt(na.exclude(as.vector(raw.data.in)),0.05) # compute eff and adeq.
effalt<-effalt(na.exclude(as.vector(raw.data.in)),0.15) # compute eff and adeq.
source("/Volumes/R/effalt.R")
effalt<-effalt(na.exclude(as.vector(raw.data.in)),0.15) # compute eff and adeq.
eff<-eff(na.exclude(as.vector(raw.data.in)),0.15) # compute eff and adeq.
source("/Volumes/R/Packages/spreval/R/plotss.R")
source("/Volumes/R/Packages/spreval/R/plotss.R")
source("/Volumes/R/Packages/spreval/R/plotss.R")
plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft",xlim=c(-30,30))
raw.data<-catchcan$landscape #import data from catchcan.rda
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
x<-seq(-27,27,9)
y<-seq(75,3,-9) # order - start at top (r1)
grd<-list(x,y)
grid<-fields::make.surface.grid(grd)
plot(grid, ylim=c(0,80),xlim=c(-30,30),xlab="ft",ylab="ft")
labels<-matrix(t(raw.data),ncol=1)
text(grid[ ,1],grid[ ,2]+3,labels,cex=0.7)
arrows(20,68,21.5,71,lw=3,length=0.1) #draw north arrow
text(23,75,"N",srt=-25) # north arrow
labels[is.na(labels)]<-0 # interp will not accept missing values - set to 0
can.data<-cbind(grid[ ,1],grid[ ,2],labels) # prep for ssplot function
spr.x<-c(0,8,-11,0);spr.y<-c(18,39,48,60) # sprinkler locations bottom to top in plan
spr.loc<-cbind(spr.x,spr.y)
plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft",xlim=c(-30,30))
limage(densigram,xlim=xlim,ylim=ylim,
xaxs="i",yaxs="i",asp=asp,...)
image(densigram,xlim=xlim,ylim=ylim,
xaxs="i",yaxs="i",asp=asp,...)
image(densigram,xlim=xlim,ylim=ylim,
xaxs="i",yaxs="i",asp=asp)
sprinklerx<-sploc[ ,1];sprinklery<-sploc[ ,2]
cx<-cdata[ ,1];cy<-cdata[ ,2]
nmx<- deparse(substitute(cx));nmy<- deparse(substitute(y)) # get default x and y array names for default xlab, ylab
depth<-cdata[ ,3]
densigram<-interp::interp(cx,cy,depth)
labels[is.na(labels)]<-0 # interp will not accept missing values - set to 0
can.data<-cbind(grid[ ,1],grid[ ,2],labels) # prep for ssplot function
spr.x<-c(0,8,-11,0);spr.y<-c(18,39,48,60) # sprinkler locations bottom to top in plan
spr.loc<-cbind(spr.x,spr.y)
cdata<-can.data
sploc<-spr.loc
sprinklerx<-sploc[ ,1];sprinklery<-sploc[ ,2]
cx<-cdata[ ,1];cy<-cdata[ ,2]
nmx<- deparse(substitute(cx));nmy<- deparse(substitute(y)) # get default x and y array names for default xlab, ylab
depth<-cdata[ ,3]
densigram<-interp::interp(cx,cy,depth)
border.x<-0.06*(max(cy)-min(cy)) #just use 5%
border.y<-0.06*(max(cy)-min(cy)) #ditto
xmin<-min(min(sprinklerx),min(cx))-border.x;xmax<-max(max(sprinklerx),max(cx))+border.x
ymin<-min(min(sprinklery),min(cy))-2*border.y;ymax<-max(max(sprinklery),max(cy))+border.y
print(xmin)
print(xmax)
if(is.null(xlim)) {xlim=c(xmin,xmax)}; if(is.null(ylim)) {ylim=c(ymin,ymax)}
print(xlim)
xlim
xlim=NULL
ylim=NULL
if(is.null(xlim)) {xlim=c(xmin,xmax)}; if(is.null(ylim)) {ylim=c(ymin,ymax)}
print(xlim)
densigram<-interp::interp(cx,cy,depth)
image(densigram,xlim=xlim,ylim=ylim,
xaxs="i",yaxs="i",asp=asp)
image(densigram,xlim=xlim,ylim=ylim,
xaxs="i",yaxs="i",asp=asp)
asp=1
image(densigram,xlim=xlim,ylim=ylim,
xaxs="i",yaxs="i",asp=asp)
image(densigram,xlim=xlim,ylim=ylim,
xaxs="i",yaxs="i")
image(densigram,xlim=xlim,ylim=ylim,
xaxs="i",yaxs="i",aps=1)
image(densigram,xlim=xlim,ylim=ylim,
xaxs="i",yaxs="i",asp=1)
xlim
warnings()
source("/Volumes/R/Packages/spreval/R/plotss.R")
source("/Volumes/R/Packages/spreval/R/plotss.R")
View(plotss)
library(spreval)
library(plotrix)
plot(1:10, asp = 1,main="Test draw.arc")
draw.arc(5, 5, 1:10/10, deg2 = 1:10*10, col = "blue")
draw.arc(8, 8, 1:10/10, deg2 = 1:10*10, col = 1:10)
plot(1:10, asp = NA,main="Test draw.arc")
draw.arc(5, 5, 1:10/10, deg2 = 1:10*10, col = "blue")
draw.arc(8, 8, 1:10/10, deg2 = 1:10*10, col = 1:10)
inches<-labels/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
in.hr<-inches*4 # 15 minute run time in audit, i.e., both zones ran 15 minutes
in.hr.data<-cbind(grid[ ,1],grid[ ,2],round(in.hr,2))
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft")
cz1<-1;cz2<-1 # color for zone 1 and 2 arcs
draw.arc(x=spr.x[1],y=spr.y[1],radius=27,deg1=-40,deg2=185,col=cz1,lwd=1.5)
detach("package:plotrix", unload = TRUE)
library(plotrix)
draw.arc(x=spr.x[1],y=spr.y[1],radius=27,deg1=-40,deg2=185,col=cz1,lwd=1.5)
x
spr.x[1]
spr.y[1]
cz1
draw.arc(x=0,y=18,radius=27,deg1=-40,deg2=185,col=cz1,lwd=1.5)
draw.arc(x=0,y=18,radius=27,deg1=-40,deg2=185,col=cz1,lwd=1.5)
draw.arc(x=0,y=18,radius=27,deg1=-40,deg2=185,col=cz1,lwd=1.5)
draw.arc(x=0,y=18,radius=32,deg1=-10,deg2=185,col=cz1,lwd=1.5)
oldpar<-par(no.readonly = TRUE)
oldpar
draw.arc(x=0s,y=0,radius=5,deg1=-40,deg2=185,col=cz1,lwd=1.5)
draw.arc(x=0,y=0,radius=5,deg1=-40,deg2=185,col=cz1,lwd=1.5)
par$usr
par$user[1]
par$user[[1]]
library(spreval)
test<-par("usr")
test
test[1]
test
test[2]
plotss.usr<-par("usr")
plotss.usr
library(spreval)
par("usr")
View(plotss)
source("/Volumes/R/Packages/spreval/R/plotss.R")
par("usr")
library(spreval)
par("usr")
main.plot
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft")
main.plot$plotss
main.plot$plotss.usr
main.plot
main.plot[1]
View(plotss)
par("usr")
library(spreval)
par("usr")
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
main.plot
par(usr=main.plot)
par("usr")
#sprinkler 1
draw.arc(x=spr.x[1],y=spr.y[1],radius=27,deg1=-40,deg2=185,col=cz1,lwd=1.5)
draw.radial.line(0,27,center=c(spr.x[1],spr.y[1]),deg=-40,col=cz1,lwd=1.5)
draw.radial.line(0,27,center=c(spr.x[1],spr.y[1]),deg=185,col=cz1,lwd=1.5)
#sprinkler 2
draw.arc(x=spr.x[2],y=spr.y[2],radius=23,deg1=-20,deg2=175,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,23,center=c(spr.x[2],spr.y[2]),deg=-20,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,23,center=c(spr.x[2],spr.y[2]),deg=175,col=cz2,lwd=1.5,lty=2)
#sprinkler 3
draw.arc(x=spr.x[3],y=spr.y[3],radius=20,deg1=-5,deg2=220,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,20,center=c(spr.x[3],spr.y[3]),deg=-5,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,20,center=c(spr.x[3],spr.y[3]),deg=220,col=cz2,lwd=1.5,lty=2)
#sprinkler 4
draw.arc(x=spr.x[4],y=spr.y[4],radius=21,deg1=-20,deg2=195,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,22,center=c(spr.x[4],spr.y[4]),deg=-20,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,22,center=c(spr.x[4],spr.y[4]),deg=195,col=cz2,lwd=1.5,lty=2)
par("usr")
plot(grid, ylim=c(0,80),xlim=c(-30,30),xlab="ft",ylab="ft")
par("usr")
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
par("usr")
library(spreval)
par("usr")
par("usr")
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
library(spreval)
par("usr")
par(usr=c(0,1,0,1))
par("usr")
par("usr")
main.plot
library(spreval)
View(plotss)
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
main.plot
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
main.plot
main.plot$user
#sprinkler 1
draw.arc(x=spr.x[1],y=spr.y[1],radius=27,deg1=-40,deg2=185,col=cz1,lwd=1.5)
draw.radial.line(0,27,center=c(spr.x[1],spr.y[1]),deg=-40,col=cz1,lwd=1.5)
draw.radial.line(0,27,center=c(spr.x[1],spr.y[1]),deg=185,col=cz1,lwd=1.5)
#sprinkler 2
draw.arc(x=spr.x[2],y=spr.y[2],radius=23,deg1=-20,deg2=175,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,23,center=c(spr.x[2],spr.y[2]),deg=-20,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,23,center=c(spr.x[2],spr.y[2]),deg=175,col=cz2,lwd=1.5,lty=2)
#sprinkler 3
draw.arc(x=spr.x[3],y=spr.y[3],radius=20,deg1=-5,deg2=220,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,20,center=c(spr.x[3],spr.y[3]),deg=-5,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,20,center=c(spr.x[3],spr.y[3]),deg=220,col=cz2,lwd=1.5,lty=2)
#sprinkler 4
draw.arc(x=spr.x[4],y=spr.y[4],radius=21,deg1=-20,deg2=195,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,22,center=c(spr.x[4],spr.y[4]),deg=-20,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,22,center=c(spr.x[4],spr.y[4]),deg=195,col=cz2,lwd=1.5,lty=2)
main.plot
library(spreval)
plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft",xlim=c(-30,30))
x<-seq(-27,27,9)
y<-seq(75,3,-9) # order - start at top (r1)
grd<-list(x,y)
grid<-fields::make.surface.grid(grd)
plot(grid, ylim=c(0,80),xlim=c(-30,30),xlab="ft",ylab="ft")
labels<-matrix(t(raw.data),ncol=1)
text(grid[ ,1],grid[ ,2]+3,labels,cex=0.7)
arrows(20,68,21.5,71,lw=3,length=0.1) #draw north arrow
text(23,75,"N",srt=-25) # north arrow
labels[is.na(labels)]<-0 # interp will not accept missing values - set to 0
can.data<-cbind(grid[ ,1],grid[ ,2],labels) # prep for ssplot function
spr.x<-c(0,8,-11,0);spr.y<-c(18,39,48,60) # sprinkler locations bottom to top in plan
spr.loc<-cbind(spr.x,spr.y)
plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft",xlim=c(-30,30))
labels[is.na(labels)]<-0 # interp will not accept missing values - set to 0
can.data<-cbind(grid[ ,1],grid[ ,2],labels) # prep for ssplot function
spr.x<-c(0,8,-11,0);spr.y<-c(18,39,48,60) # sprinkler locations bottom to top in plan
spr.loc<-cbind(spr.x,spr.y)
tstr<-plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft",xlim=c(-30,30))
tstr
labels[is.na(labels)]<-0 # interp will not accept missing values - set to 0
can.data<-cbind(grid[ ,1],grid[ ,2],labels) # prep for ssplot function
spr.x<-c(0,8,-11,0);spr.y<-c(18,39,48,60) # sprinkler locations bottom to top in plan
spr.loc<-cbind(spr.x,spr.y)
tstr<-plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft")
plotss.usr
plotss.usr<-NULL
library(spreval)
library(plotrix)
labels[is.na(labels)]<-0 # interp will not accept missing values - set to 0
can.data<-cbind(grid[ ,1],grid[ ,2],labels) # prep for ssplot function
spr.x<-c(0,8,-11,0);spr.y<-c(18,39,48,60) # sprinkler locations bottom to top in plan
spr.loc<-cbind(spr.x,spr.y)
(plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft"))
labels[is.na(labels)]<-0 # interp will not accept missing values - set to 0
can.data<-cbind(grid[ ,1],grid[ ,2],labels) # prep for ssplot function
spr.x<-c(0,8,-11,0);spr.y<-c(18,39,48,60) # sprinkler locations bottom to top in plan
spr.loc<-cbind(spr.x,spr.y)
(plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft"))
effad.table<-array(1:10,dim=c(2,5))
target=c(0.2,0.3,0.4,0.5,0.6) # target depths
for (j in 1:5){
entry<-eff(as.vector(na.exclude(raw.data.in)*4,target[j]))
effad.table[1,j]<-entry$appeff # extract for later use
effad.table[2,j]<-entry$appadeq
}
target
target[1]
is.numeric(target)
test<-as.vector(na.exclude(raw.data.in*4)
library(spreval)
library(spreval)
library(plotrix)
library(spreval)
library(plotrix)
knitr::opts_chunk$set(collapse = TRUE,
comment = "#>",
dev = "png", dev.args = list(type = "cairo-png"))
raw.data<-catchcan$landscape #import data from catchcan.rda
raw.data.in<-raw.data/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
#need to convert matrix to vector for na.exclude, otherwise entire row with any NAs will be excluded
eff<-eff(na.exclude(as.vector(raw.data.in)),mean(raw.data.in,na.rm=TRUE)) # compute eff and adeq.
eff.out<-eff$appeff # extract for later use
adeq.out<-eff$appadeq # extract for later use
knitr::kable(raw.data,format="pipe",caption="Raw catch can data matrix, mls. 'NA' are phantom cans.")
# create a x,y location grid from fields::
# catch can spacing is 6 ft x 6 ft
x<-seq(-27,27,9)
y<-seq(75,3,-9) # order - start at top (r1)
grd<-list(x,y)
grid<-fields::make.surface.grid(grd)
plot(grid, ylim=c(0,80),xlim=c(-30,30),xlab="ft",ylab="ft")
labels<-matrix(t(raw.data),ncol=1)
text(grid[ ,1],grid[ ,2]+3,labels,cex=0.7)
arrows(20,68,21.5,71,lw=3,length=0.1) #draw north arrow
text(23,75,"N",srt=-25) # north arrow
labels[is.na(labels)]<-0 # interp will not accept missing values - set to 0
can.data<-cbind(grid[ ,1],grid[ ,2],labels) # prep for ssplot function
spr.x<-c(0,8,-11,0);spr.y<-c(18,39,48,60) # sprinkler locations bottom to top in plan
spr.loc<-cbind(spr.x,spr.y)
plotss(can.data,spr.loc,spklab=c("1","2","3","4"),ylab="ft", xlab="ft")
#now plot application rates
inches<-labels/((7.2/2)^2*pi)/2.54 #ml (cc) to cm depth and divide by 2.54 cm/in.
in.hr<-inches*4 # 15 minute run time in audit, i.e., both zones ran 15 minutes
in.hr.data<-cbind(grid[ ,1],grid[ ,2],round(in.hr,2))
# plot(in.hr.data). send plot to object for recall of par("usr")
# set asp=1 for true scale plot and non-skewed sprinkler wetted radius arcs
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
#reset to user coordinates used in plotss for subsequent low level plot drawing (arcs,lines)
par(usr=main.plot) # use this to reset par("usr") for low level plots (arc and lines)
cz1<-1;cz2<-1 # color for zone 1 and 2 arcs
#sprinkler 1
draw.arc(x=spr.x[1],y=spr.y[1],radius=27,deg1=-40,deg2=185,col=cz1,lwd=1.5)
draw.radial.line(0,27,center=c(spr.x[1],spr.y[1]),deg=-40,col=cz1,lwd=1.5)
draw.radial.line(0,27,center=c(spr.x[1],spr.y[1]),deg=185,col=cz1,lwd=1.5)
#sprinkler 2
draw.arc(x=spr.x[2],y=spr.y[2],radius=23,deg1=-20,deg2=175,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,23,center=c(spr.x[2],spr.y[2]),deg=-20,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,23,center=c(spr.x[2],spr.y[2]),deg=175,col=cz2,lwd=1.5,lty=2)
#sprinkler 3
draw.arc(x=spr.x[3],y=spr.y[3],radius=20,deg1=-5,deg2=220,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,20,center=c(spr.x[3],spr.y[3]),deg=-5,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,20,center=c(spr.x[3],spr.y[3]),deg=220,col=cz2,lwd=1.5,lty=2)
#sprinkler 4
draw.arc(x=spr.x[4],y=spr.y[4],radius=21,deg1=-20,deg2=195,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,22,center=c(spr.x[4],spr.y[4]),deg=-20,col=cz2,lwd=1.5,lty=2)
draw.radial.line(0,22,center=c(spr.x[4],spr.y[4]),deg=195,col=cz2,lwd=1.5,lty=2)
main.plot
main.plot$user
plotss.usr
source("/Volumes/R/Packages/spreval/R/plotss.R")
library(spreval)
main.plot
main.plot$user
library(spreval)
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
main.plot
main.plot$user
plotss.usr
library(spreval)
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
main.plot
plotss.usr
library(spreval)
main.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
main.plot
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
plotss.usr
library(spreval)
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
source("/Volumes/R/Packages/spreval/R/plotss.R")
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
tst<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
tst
source("/Volumes/R/Packages/spreval/R/plotss.R")
plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
plotss.usr
my.plot<-plotss(in.hr.data,spr.loc,spklab=c("1","2","3","4"),xlab="ft", ylab="ft",asp=1)
my.plot
library(spreval)
